)
ggplot(summ_1) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
View(summ_1)
View(df_anes)
summary(modelcondic)
summ_1 = df_anes %>%
group_by(age, sex, maxEducLevel,oficio,estrato1,age_cuadrado) %>%
summarize(
mean_y = mean(log(y_ingLab_m_ha)),
yhat_reg = mean(salario_edad), .groups="drop"
)
View(summ_1)
View(summ_1)
ggplot(summ_1) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
summ_1 = df_anes %>%
group_by(age, sex, maxEducLevel, oficio, estrato1, age_cuadrado) %>%
summarize(
mean_y = mean(log(y_ingLab_m_ha)),
yhat_reg = mean(salario_edad), .groups="drop"
)
summ_2 = df_anes %>%
group_by(age, sex, maxEducLevel, oficio, estrato1, age_cuadrado) %>%
summarize(
mean_y = mean(log(y_ingLab_m_ha)),
yhat_reg = mean(salario_edad), .groups="drop"
)
group_by(age, sex, maxEducLevel, oficio, estrato1, age_cuadrado) %>%
View(df_anes)
View(df_anes)
summ_2 = df_anes %>%
group_by(age, sex, maxEducLevel, oficio, estrato1, age_cuadrado,salario_edad) %>%
summarize(
mean_y = mean(log(y_ingLab_m_ha)),
yhat_reg = mean(salario_edad), .groups="drop"
)
View(summ_2)
summ_2 = df_anes %>%
group_by(age, sex, maxEducLevel, oficio, estrato1, age_cuadrado,salario_edad) %>%
summarize(
mean_y = mean(log(y_ingLab_m_ha)),
yhat_reg = mean(salario_edad)
)
View(summ_2)
ggplot(summ_2) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(df_anes) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(df_anes+summ_2) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(df_anes,summ_2) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(summ_2) +
geom_point(df_anes,
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(summ_2) +
geom_point(
aes(df_anes, x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(summ_2) +
geom_point(
aes( x = salario_edad, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = salario_edad, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(summ_2) +
geom_point(
aes( x = yhat_reg, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = yhat_reg, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(df_anes) +
geom_point(
aes( x = log(y_ingLab_m_ha, y = salario_edad),
color = "blue", size = 2
) +
geom_line(
aes( x = log(y_ingLab_m_ha, y = salario_edad),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor el genero",
x = "sex",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(df_anes) +
ggplot(df_anes) +
geom_point(aes) x = log(y_ingLab_m_ha, y = salario_edad),color = "blue", size = 2) +
ggplot(df_anes) +
geom_point(aes, (x = log(y_ingLab_m_ha, y = salario_edad),color = "blue", size = 2)) +
ggplot(summ_2) +
geom_point(
aes(x = sex, y = mean_y),
color = "blue", size = 2
) +
geom_line(
aes(x = sex, y = yhat_reg),
color = "green", size = 1.5
) +
labs(
title = "Salarios usando como predictor la edad y con atipicos",
x = "Edad",
y = "Salario por hora"
) +
theme_bw()+
scale_y_continuous(limits = c(7, 10))
ggplot(data = df ,
mapping = aes(x = age , y = yhat_reg , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df_anes ,
mapping = aes(x = sex , y = salario_edad , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df_anes ,
mapping = aes(x = sex , y =log(y_ingLab_m_ha)  , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df_anes ,
mapping = aes(x = sex , y =mean_y   , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df_anes ,
mapping = aes(x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df_anes ,
geom_point = aes(x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df_anes ,
geom_point() aes(x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex))) +
ggplot(data = df_anes ,
geom_point() aes(x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex))) +
ggplot(data = df_anes)+
geom_point() aes(x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex))) +
ggplot(data = df_anes)+
geom_point(aes (x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex)))
ggplot(data = df_anes)+
geom_point(aes (x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex))) +
geom_line(aes (x = sex , y = mean(log(y_ingLab_m_ha))  , group=as.factor(sex) , color=as.factor(sex)))
#creación de variables ---###
## se crean dos varualbes: la variable del logaritmo del salario y edad al cuadrado "age2" para la base de datos df:
df<- df %>% mutate(logingtot=log(y_ingLab_m_ha))
df <- df %>% mutate(age2 = age^2)
p <- ggplot(data=df) +
geom_histogram(mapping = aes(x=logingtot , group=as.factor(sex) , fill=as.factor(sex)))
p + scale_fill_manual(values = c("0"="green" , "1"="blue") , label = c("0"="Mujer" , "1"="hombre") , name = "Sexo")
## gráfico de correlación entre variables
df %>% select(c("age", "age2", "formal", "logingtot", "totalHoursWorked", "sex", "maxEducLevel", "oficio")) %>% chart.Correlation()
#estimación función brecha de ingresos por género
reg <- lm(logingtot~sex, df)
stargazer(reg, type = "text")
reg2 <- lm(logingtot~sex + age + age2 + age:sex, df)
stargazer(reg, reg2, type = "text")
### Bootstrap:
## se traen los coeficientes
coef <- reg2$coef
coef
## se traen los coeficientes en escalares
b1 <- coef[2]
b2 <- coef[3]
b3 <- coef[4]
b4 <- coef[5]
## se calcula el efecto marginal salario - años en la media para las mujeres
age_bar <- mean(df$age)
elast <- b1 + b4*age_bar
elast
## se genera la predicción del logaritmo del ingreso
df <- df %>% ungroup() %>% mutate(y_hat = predict(reg2))
ggplot(data = df ,
mapping = aes(x = age , y = y_hat , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
## cálculo peak age por género
peak_age_female <- (-b2-b4)/(2*b3)
peak_age_male <- (-b2)/(2*b3)
peak_age_female
peak_age_male
## se define función para el cálculo de peak age por género
eta_mod.fn <- function(data, index, female_bar){ # argumentos de la función
f <- lm(logingtot~sex + age + age2 + age:sex, data, subset = index)
coef <- f$coef
b1 <- coef[2]
b2 <- coef[3]
b3 <- coef[4]
b4 <- coef[5]
peak_age <- (-b2-b4*female_bar)/(2*b3)
return(peak_age)
}
# Se aplica la función
eta_mod.fn(df, 1:9892, 1)
eta_mod.fn(df, 1:9892, 0)
## semilla
set.seed(123)
## implementación del bootstrap para cada base de datos
boot_female <- boot(data = df, eta_mod.fn, female_bar = 1, R = 5000)
boot_female
boot_male <- boot(data = df, eta_mod.fn, female_bar = 0, R = 5000)
boot_male
## cálculo de los intervalos de confianza por género para df
CI_female <- c(peak_age_female - 1.96*0.4694526, peak_age_female + 1.96*0.4694526)
CI_female
CI_male <- c(peak_age_male - 1.96*0.3823748, peak_age_male + 1.96*0.3823748)
CI_male
## regresión con controles
reg3 <- lm(logingtot~sex + age + age2 + age:sex, df)
stargazer(reg, reg2, reg3, type = "text")
df <- df %>% ungroup() %>% mutate(y_hat2 = predict(reg3))
ggplot(data = df ,
mapping = aes(x = age , y = y_hat2 , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df ,
mapping = aes(x = age , y = mean(log(y_ingLab_m_ha)) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df ,
mapping = aes(x = age , y = mean(salario_edad)) , group=as.factor(sex) , color=as.factor(sex))) +
ggplot(data = df ,
mapping = aes(x = age , y = mean(salario_edad) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df ,
mapping = aes(x = age , y = mean(log(y_ingLab_m_ha)) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
pred_func_mujeres <- predict(modelo_mujeres)
ggplot(data = df ,
mapping = aes(x = age , y = log(y_ingLab_m_ha) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
ggplot(data = df ,
mapping = aes(x = age , y = log(y_ingLab_m_ha) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+ geom_line(aes(x = age , y = log(y_ingLab_m_ha) , group=as.factor(sex) , color=as.factor(sex)))
df$salario_edad = predict(modelcondic)
ggplot(data = df ,
mapping = aes(x = age , y = salario_edad , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+ geom_line(aes(x = age , y = salario_edad , group=as.factor(sex) , color=as.factor(sex)))
ggplot(data = df ,
mapping = aes(x = age , y = log(y_ingLab_m_ha) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+ geom_line(aes(x = age , y = log(y_ingLab_m_ha) , group=as.factor(sex) , color=as.factor(sex)))
library(ggplot2)
ggplot(data = df, aes(x = age, y = y_ingLab_m_ha, color = genero)) +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Edad", y = "Salario promedio", color = "Género") +
geom_smooth(method = "lm", se = FALSE)
library(ggplot2)
ggplot(data = df, aes(x = age, y = y_ingLab_m_ha, color=as.factor(sex))) +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Edad", y = "Salario promedio", color = "Género") +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = df_anes ,
mapping = aes(x = age , y = mean(salario_edad) , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+ geom_line(aes(x = age , y = mean(salario_edad) , group=as.factor(sex) , color=as.factor(sex)))
ggplot(data = df_anes ,
mapping = aes(x = age , y = salario_edad , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+ geom_line(aes(x = age , y = salario_edad , group=as.factor(sex) , color=as.factor(sex)))
df_anes$salario_edad = predict(modelcondic)
ggplot(data = df ,
mapping = aes(x = age , y = y_hat2 , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
df <- df %>% ungroup() %>% mutate(y_hat2 = predict(modelcondic))
df_anes <- df_anes %>% ungroup() %>% mutate(y_hat2 = predict(modelcondic))
ggplot(data = df_anes ,
mapping = aes(x = age , y = y_hat2 , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()
df_anes <- df_anes %>% ungroup() %>% mutate(y_hat2 = predict(modelcondic))
ggplot(data = df_anes ,
mapping = aes(x = age , y = y_hat2 , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+scale_color_manual(values = c("blue", "red"))
df_anes <- df_anes %>% ungroup() %>% mutate(y_hat2 = predict(modelcondic))
ggplot(data = df_anes ,
mapping = aes(x = age , y = y_hat2 , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+scale_color_manual(values = c("blue", "red"))+geom_smooth(method = "lm", se = FALSE)
df_anes <- df_anes %>% ungroup() %>% mutate(y_hat2 = predict(modelcondic))
ggplot(data = df_anes ,
mapping = aes(x = age , y = y_hat2 , group=as.factor(sex) , color=as.factor(sex))) +
geom_point()+scale_color_manual(values = c("blue", "red"))+geom_smooth(method = "nl", se = FALSE)
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
df_training_hogares <- import("train_hogares.cvs")
setwd("kaggle competitions download -c uniandes-bdml-20231-ps2")
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("train_hogares.cvs")
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
## Se llaman las bases de datos de Training:
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("train_hogares.cvs")
install.packages("pacman")
df_training_hogares <- import("train_hogares.csv")
df_training_hogares <- import("train_hogares.csv")
df_training_personas <- import("train_personas.csv")
#Problmem_Set_2
# Limpieza de datos Trainign
#Carlos Vergara, Alexandra Rizo, Danna Bolaños, Héctor Tacumán
_______________________________________________________________
colnames(df_training_hogares)
summary(df_training_hogares)
summary(df_training_personas)
#######Preparación del espacio########
## Se llaman los paquetes para su uso en el Script:
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
install.packages("pacman")
setwd("~/OneDrive - Universidad de los Andes/uniandes-bdml-20231-ps2 2")
df_training_hogares <- import("train_hogares.csv")
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/uniandes-bdml-20231-ps2 2")
df_training_hogares <- import("train_hogares.csv")
setwd("~/OneDrive - Universidad de los Andes/uniandes-bdml-20231-ps2 2")
df_training_hogares <- import("train_hogares.csv")
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/uniandes-bdml-20231-ps2 2")
df_training_hogares <- import("train_hogares.csv")
df_training_personas <- import("train_personas.csv")
df_training_hogares <- import("train_hogares.csv")
df_training_personas <- import("train_personas.csv")
df_test_hogares <- import("test_hogares.csv")
df_test_personas <- import("test_personas.csv")
saveRDS(df_training_hogares,"df_training_hogares.rds")
saveRDS(df_training_hogares,"df_training_hogares.rds")
saveRDS(df_training_personas,"df_training_personas.rds")
saveRDS(df_test_hogares,"df_test_hogares.rds")
saveRDS(df_test_personas,"df_test_personas.rds")
df_sample_submission <- import("df_sample_submission.csv")
df_sample_submission <- import("sample_submission.csv")
saveRDS(df_sample_submission,"df_sample_submission.rds")
#######Preparación del espacio########
## Se llaman los paquetes para su uso en el Script:
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
## Se llaman las bases de datos de Training:
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("train_hogares.rds")
install.packages("pacman")
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("df_train_hogares.rds")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("df_train_hogares.rds")
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("df_training_hogares.rds")
df_training_personas <- import("df_training_personas.rds")
colnames(df_training_hogares)
colnames (df_training_personas)
summary(df_training_hogares)
summary(df_training_personas)
df_test_hogares <- import("df_test_hogares.rds")
df_test_personas <- import("df_test_personas.rds")
colnames(df_training_hogares)
colnames (df_training_personas)+
colnames(df_test_hogares)
colnames (df_training_personas)
summary(df_training_hogares)
summary(df_training_personas)
summary(df_test_hogares)
summary(df_test_personas)
df_training_personas <- df_training_personas %>% select (colnames(df_training_hogares), Ingtot)
View(df_training_hogares)
View(df_training_hogares)
df_training_personas <- df_training_personas %>% select(colnames(df_test_personas), Ingtotob)
## Se llaman los paquetes para su uso en el Script:
install.packages("pacman")
require(pacman)
p_load(tidyverse,rvest,writexl,rio,skimr,pastecs,PerformanceAnalytics,naniar,gtsummary)
## Se llaman las bases de datos de Training:
rm(list=ls())
setwd("~/OneDrive - Universidad de los Andes/2023/2023-1/BIG DATA/TALLERES GRUPALES/TALLER No. 2/Problem_Set_2-_Predicting_Poverty/3. STORE")
df_training_hogares <- import("df_training_hogares.rds")
df_training_personas <- import("df_training_personas.rds")
df_test_hogares <- import("df_test_hogares.rds")
df_test_personas <- import("df_test_personas.rds")
colnames(df_training_hogares)
